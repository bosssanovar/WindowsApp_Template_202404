using Microsoft.Extensions.DependencyInjection;

namespace UiParts
{
    /// <summary>
    /// DI(Dependency Injection)のServiceProviderのグローバルアクセスを可能とする機能クラス
    /// </summary>
    public static class GlobalServiceProvider
    {
        #region Constants -------------------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------

        #region Fields ----------------------------------------------------------------------------------------

        private static IServiceProvider? _provider;

        #endregion --------------------------------------------------------------------------------------------

        #region Properties ------------------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------

        #region Events ----------------------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------

        #region Constructor -----------------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------

        #region Methods - public ------------------------------------------------------------------------------

        /// <summary>
        /// 構築済みのService Providerを設定します。
        /// </summary>
        /// <param name="provider">Service Provider</param>
        public static void SetProvider(IServiceProvider provider)
        {
            _provider = provider;
        }

        /// <summary>
        /// インスタンスを取得します。
        /// </summary>
        /// <typeparam name="T">取得するインスタンスのクラス</typeparam>
        /// <returns>インスタンス</returns>
        /// <exception cref="InvalidOperationException">ServiceProviderが設定されていない場合に発行されます。</exception>
        public static T GetRequiredService<T>()
             where T : notnull
        {
            if (_provider == null)
            {
                throw new InvalidOperationException("先にSetProviderすること");
            }

            return _provider.GetRequiredService<T>();
        }

        #endregion --------------------------------------------------------------------------------------------

        #region Methods - internal ----------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------

        #region Methods - protected ---------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------

        #region Methods - private -----------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------

        #region Methods - override ----------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------

        #region Inner Class/Enum ------------------------------------------------------------------------------

        #endregion --------------------------------------------------------------------------------------------
    }
}
